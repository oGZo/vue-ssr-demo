const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs')
const webpack = require('webpack')
const merge = require('webpack-merge')
const chokidar = require('chokidar')
const PassThrough = require('stream').PassThrough;
const [clientConfig, serverConfig] = require('./dev.config');
const { hotMiddleware} = require('koa-webpack-middleware')
const devMiddleware = require('webpack-dev-middleware')
const VueSSRClientPlugin = require('vue-server-renderer/client-plugin')

const resolve = (name) => {
  return path.resolve(__dirname, name);
}


// console.log(clientConfig);
// console.log(serverConfig);
const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {}
}

module.exports = function devServer(app, templatePath, cb) {
  let bundle
  let template
  let clientManifest

  let ready
  const readyPromise = new Promise(rosolve => {
    ready = rosolve;
  })
  const update = () => {
    if (bundle && clientManifest) {
      ready()
      cb(bundle, {template, clientManifest})
    }
  }

  // read template from disk and watch
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar
    .watch(templatePath)
    .on('change', () => {
      template = fs.readFileSync(templatePath, 'utf-8')
      console.log('index.html template updated.')
      update()
    })

  const clientCompiler = webpack(clientConfig)
  const devMiddlewareInstace = devMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  })
  
  app.use(async(ctx, next) => {
    await devMiddlewareInstace(ctx.req, {
      end: content => { 
        ctx.body = content
      },
      setHeader: (name, value) => { 
        ctx.set(name, value)
      }
  	}, next)
  });

  // dev middleware
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    stats
      .errors
      .forEach(err => console.error(err))
    stats
      .warnings
      .forEach(err => console.warn(err))
    if (stats.errors.length) 
      return
    clientManifest = JSON.parse(readFile(devMiddlewareInstace.fileSystem, 'vue-ssr-client-manifest.json'))
    update()
  })

  app.use(hotMiddleware(clientCompiler, {heartbeat: 5000}));

  // hot middleware app.use(require('webpack-hot-middleware')(clientCompiler, {
  // heartbeat: 5000 })) watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) 
      throw err
    stats = stats.toJson()
    if (stats.errors.length) 
      return

      // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}